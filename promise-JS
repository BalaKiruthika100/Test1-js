const fs = require('fs');

const readFile = (fileName) => {

 const rt = new Promise(function (resolve, reject) {

 fs.readFile(fileName, 'utf-8', function (err, data) {

 if (err) {

 reject(err);

 } else {

 resolve(data);

 }

 });

 });

 return rt;

};
 

readFile('./test1')

 .then(function (data) {

 console.log('file read happened first time');

 console.log(data);

 return readFile('/kishore');

 }).then(function (data) {

 console.log('file read happened second time');

 console.log(data);

 }).catch(function (err) {

 console.log('insdie errr', err)

 });
 
 
 
 //
 let myFirstPromise = new Promise((resolve, reject) => {
  // We call resolve(...) when what we were doing asynchronously was successful, and reject(...) when it failed.
  // In this example, we use setTimeout(...) to simulate async code. 
  // In reality, you will probably be using something like XHR or an HTML5 API.
  setTimeout(function(){
    resolve("Success!"); // Yay! Everything went well!
  }, 250);
});

myFirstPromise.then((successMessage) => {
  // successMessage is whatever we passed in the resolve(...) function above.
  // It doesn't have to be a string, but if it is only a succeed message, it probably will be.
  console.log("Yay! " + successMessage);
});
//[object Promise] { ... }
//"Yay! Success!"
